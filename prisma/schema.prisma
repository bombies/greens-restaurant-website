// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  firstName   String
  lastName    String
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
  permissions Int

  createdInventoryIds String[]    @db.ObjectId
  createdInventories  Inventory[]
}

model Inventory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @unique
  name      String   @unique
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUserId String @db.ObjectId
  createdByUser   User   @relation(fields: [createdByUserId], references: [id])

  stock    Stock[]
  stockIds String[] @db.ObjectId

  snapshotIds String[]            @db.ObjectId
  snapshots   InventorySnapshot[]
}

model InventorySnapshot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @db.ObjectId

  stockSnapshots StockSnapshot[]
}

model Stock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @db.ObjectId
}

model StockSnapshot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String
  name      String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventorySnapshotId String            @db.ObjectId
  inventorySnapshot   InventorySnapshot @relation(fields: [inventorySnapshotId], references: [id], onDelete: Cascade)
}
