generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  firstName   String
  lastName    String
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String? // Legacy images
  avatar      String?
  permissions Int

  createdInventoryIds String[]    @db.ObjectId
  createdInventories  Inventory[]

  openStockRequests StockRequest[] @relation(name: "openStocks")

  assignedStockRequestsIds String[]       @db.ObjectId
  assignedStockRequests    StockRequest[] @relation(name: "assignedStocks", fields: [assignedStockRequestsIds], references: [id])
}

model StockRequest {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  status        StockRequestStatus
  reviewedNotes String?

  assignedToUsersId String[] @db.ObjectId
  assignedToUsers   User[]   @relation(name: "assignedStocks", fields: [assignedToUsersId], references: [id])

  requestedByUserId String               @db.ObjectId
  requestedByUser   User                 @relation(name: "openStocks", fields: [requestedByUserId], references: [id])
  requestedItems    RequestedStockItem[] @relation()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StockRequestStatus {
  DELIVERED
  PARTIALLY_DELIVERED
  REJECTED
  PENDING
}

model RequestedStockItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  amountRequested Int
  amountProvided  Int?

  stockRequest   StockRequest? @relation(fields: [stockRequestId], references: [id], onDelete: Cascade)
  stockRequestId String?       @db.ObjectId

  stock    Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockId  String @db.ObjectId
  stockUID String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InventoryType {
  BAR
  DEFAULT
}

enum StockType {
  FLASK_DRINK
  QUART_BOTTLE
  IMPERIAL_BOTTLE
  SIX_CASE
  TWELVE_CASE
  TWENTY_FOUR_CASE
  DEFAULT
}

model Inventory {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  uid    String         @unique
  name   String         @unique
  userId String?        @db.ObjectId
  type   InventoryType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUserId String @db.ObjectId
  createdByUser   User   @relation(fields: [createdByUserId], references: [id])

  stock    Stock[]  @relation(name: "sourceInventory")
  stockIds String[] @db.ObjectId

  snapshotIds String[]            @db.ObjectId
  snapshots   InventorySnapshot[]

  inventorySections InventorySection[]

  assignedStock    Stock[]  @relation(name: "assignedInventories", fields: [stockIds], references: [id])
  assignedStockIds String[] @default([]) @db.ObjectId
}

model InventorySnapshot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @db.ObjectId

  stockSnapshots StockSnapshot[]
}

model InventorySection {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uid  String @unique
  name String

  inventoryId String    @db.ObjectId
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  snapshots InventorySectionSnapshot[]
  stock     Stock[]                    @relation(name: "sourceInventorySection")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedStock    Stock[]  @relation(name: "assignedInventorySections", fields: [assignedStockIds], references: [id])
  assignedStockIds String[] @default([]) @db.ObjectId
}

model InventorySectionSnapshot {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  uid String

  inventorySectionId String           @db.ObjectId
  inventorySection   InventorySection @relation(fields: [inventorySectionId], references: [id], onDelete: Cascade)
  stockSnapshots     StockSnapshot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stock {
  id    String     @id @default(auto()) @map("_id") @db.ObjectId
  uid   String     @unique
  name  String
  price Float      @default(value: 0.0)
  type  StockType?

  requestedStockItems RequestedStockItem[] @relation()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventory          Inventory?        @relation(name: "sourceInventory", fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId        String?           @db.ObjectId
  inventorySectionId String?           @db.ObjectId
  inventorySection   InventorySection? @relation(name: "sourceInventorySection", fields: [inventorySectionId], references: [id], onDelete: Cascade)

  assignedInventories  Inventory[] @relation(name: "assignedInventories", fields: [assignedInventoryIds], references: [id])
  assignedInventoryIds String[]    @default([]) @db.ObjectId

  assignedInventorySections   InventorySection[] @relation(name: "assignedInventorySections", fields: [assignedInventorySectionIds], references: [id])
  assignedInventorySectionIds String[]           @default([]) @db.ObjectId
}

model StockSnapshot {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  uid          String
  quantity     Int
  name         String
  price        Float      @default(value: 0.0)
  sellingPrice Float      @default(value: 0.0)
  type         StockType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventorySnapshotId String?            @db.ObjectId
  inventorySnapshot   InventorySnapshot? @relation(fields: [inventorySnapshotId], references: [id], onDelete: Cascade)

  inventorySectionSnapshotId String?                   @db.ObjectId
  inventorySectionSnapshot   InventorySectionSnapshot? @relation(fields: [inventorySectionSnapshotId], references: [id], onDelete: Cascade)
}

model InvoiceInformation {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName        String  @unique
  companyAddress     String
  companyLogo        String? // Legacy
  companyAvatar      String?
  termsAndConditions String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceCustomer {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  customerName        String  @unique
  customerEmail       String? @unique
  customerAddress     String?
  customerDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices Invoice[]
}

model Invoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  number      Int      @unique
  description String?
  paid        Boolean?

  customerId String          @db.ObjectId
  customer   InvoiceCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  invoiceItems InvoiceItem[] @relation()

  createdAt DateTime  @default(now())
  dueAt     DateTime?
  updatedAt DateTime  @updatedAt
}

model InvoiceItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  quantity    Int
  price       Float
  description String

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
