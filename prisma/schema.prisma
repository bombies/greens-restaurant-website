generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  firstName   String
  lastName    String
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String? // Legacy images
  avatar      String?
  permissions Int

  createdInventoryIds String[]    @db.ObjectId
  createdInventories  Inventory[]

  openStockRequests StockRequest[] @relation(name: "openStocks")

  assignedStockRequestsIds String[]       @db.ObjectId
  assignedStockRequests    StockRequest[] @relation(name: "assignedStocks", fields: [assignedStockRequestsIds], references: [id])
}

model StockRequest {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  status        StockRequestStatus
  reviewedNotes String?

  assignedToUsersId String[] @db.ObjectId
  assignedToUsers   User[]   @relation(name: "assignedStocks", fields: [assignedToUsersId], references: [id])

  requestedByUserId String               @db.ObjectId
  requestedByUser   User                 @relation(name: "openStocks", fields: [requestedByUserId], references: [id])
  requestedItems    RequestedStockItem[] @relation()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StockRequestStatus {
  DELIVERED
  PARTIALLY_DELIVERED
  REJECTED
  PENDING
}

model RequestedStockItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  amountRequested Int
  amountProvided  Int?

  stockRequest   StockRequest? @relation(fields: [stockRequestId], references: [id], onDelete: Cascade)
  stockRequestId String?       @db.ObjectId

  stock   Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @unique
  name      String   @unique
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUserId String @db.ObjectId
  createdByUser   User   @relation(fields: [createdByUserId], references: [id])

  stock    Stock[]
  stockIds String[] @db.ObjectId

  snapshotIds String[]            @db.ObjectId
  snapshots   InventorySnapshot[]
}

model InventorySnapshot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @db.ObjectId

  stockSnapshots StockSnapshot[]
}

model Stock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @db.ObjectId

  requestedStockItems RequestedStockItem[] @relation()
}

model StockSnapshot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String
  name      String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventorySnapshotId String            @db.ObjectId
  inventorySnapshot   InventorySnapshot @relation(fields: [inventorySnapshotId], references: [id], onDelete: Cascade)

  inventoryId String @db.ObjectId
}

model InvoiceInformation {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName        String  @unique
  companyAddress     String
  companyLogo        String? // Legacy
  companyAvatar      String?
  termsAndConditions String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceCustomer {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  customerName        String  @unique
  customerEmail       String? @unique
  customerAddress     String?
  customerDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices Invoice[]
}

model Invoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  number      Int      @unique
  description String?
  paid        Boolean?

  customerId String          @db.ObjectId
  customer   InvoiceCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  invoiceItems InvoiceItem[] @relation()

  createdAt DateTime  @default(now())
  dueAt     DateTime?
  updatedAt DateTime  @updatedAt
}

model InvoiceItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  quantity    Int
  price       Float
  description String

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
